name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (only for manual triggers)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - auto

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    # Only run if tests passed (or manual trigger) AND not a release commit
    if: |
      (github.event_name == 'workflow_dispatch' || 
       github.event.workflow_run.conclusion == 'success') &&
      (github.event_name != 'push' || 
       !startsWith(github.event.head_commit.message, 'chore(release):'))
    permissions:
      contents: write
      id-token: write
    steps:
    # Generate token from GitHub App
    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
    
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for standard-version
        token: ${{ steps.app-token.outputs.token }}
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - run: npm ci
    
    # Determine release type
    - name: Determine release type
      id: release_type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use input
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          # Automatic trigger - let standard-version decide based on commits
          RELEASE_TYPE="auto"
        fi
        echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
    
    # Run standard-version to bump version and generate changelog
    - name: Bump version and generate changelog
      run: |
        RELEASE_TYPE="${{ steps.release_type.outputs.RELEASE_TYPE }}"
        if [ "$RELEASE_TYPE" == "auto" ]; then
          npx standard-version
        else
          npx standard-version --release-as $RELEASE_TYPE
        fi
    
    # Build the project (after version bump so dist has correct version)
    - run: npm run build
    
    # Get the new version
    - name: Get version
      id: version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    # Extract release notes from CHANGELOG.md
    - name: Extract release notes
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        # Extract content between version header and next header (handles both ## and ###)
        NOTES=$(awk '/^##+ \['"$VERSION"'\]/ {flag=1; next} /^#+ \[/ && flag {exit} flag' CHANGELOG.md)
        
        # Save to file to handle multi-line content properly
        echo "$NOTES" > release_notes.md
    
    # Push commits and tags
    - name: Push changes
      run: |
        # GitHub App token will bypass branch protection
        git push --follow-tags origin main
    
    # Create GitHub release using gh CLI (matches manual process)
    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        gh release create "v$VERSION" \
          --title "v$VERSION" \
          --notes-file release_notes.md
    
    # Publish to NPM with provenance
    - run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}